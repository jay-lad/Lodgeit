//
//  UserPoolSignUpViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.8
//
//

import Foundation
import UIKit
import AWSMobileHubHelper
import AWSCognitoIdentityProvider

class UserPoolSignUpViewController: UIViewController {
    
    var pool: AWSCognitoIdentityUserPool?
    var sentTo: String?
    
    @IBOutlet var txtFirstName: ThemeTextField!
    
    @IBOutlet var txtSurname: ThemeTextField!
    
    @IBOutlet var txtCountry: ThemeTextField!
    
    @IBOutlet weak var txtUserName: UITextField!
    @IBOutlet weak var txtPassword: UITextField!
    
    @IBOutlet var txtRetypePassword: ThemeTextField!
    @IBOutlet weak var txtPhoneNumber: UITextField!
    @IBOutlet weak var txtEmail: UITextField!
    
    var picker = UIPickerView()
    var selectedContryCode : String?
    
    let arrCountry = [["country_name":"Australia","country_code":"+61"],
                      ["country_name":"Canada","country_code":"+1"],
                      ["country_name":"China","country_code":"+86"],
                      ["country_name":"Finland","country_code":"+358"],
                      ["country_name":"France","country_code":"+33"],
                      ["country_name":"Germany","country_code":"+49"],
                      ["country_name":"India","country_code":"+91"],
                      ["country_name":"Japan","country_code":"+81"],
                      ["country_name":"South Africa","country_code":"+27"]]
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.pool = AWSCognitoIdentityUserPool.init(forKey: AWSCognitoUserPoolsSignInProviderKey)
        configUICountry()
        
        picker.dataSource = self
        picker.delegate = self
    }
    
    func configUICountry() {
        picker = UIPickerView(frame: CGRect(x: 0.0, y: 0.0, width: UIScreen.mainScreen().bounds.size.width, height: 216.0))
        picker.backgroundColor = UIColor.whiteColor()
        
        txtCountry.addRightSubView()
        txtCountry.inputView = picker
        
        txtCountry.text = arrCountry[0]["country_name"]
        selectedContryCode = arrCountry[0]["country_code"]
    }
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
        if let signUpConfirmationViewController = segue.destinationViewController as? UserPoolSignUpConfirmationViewController {
//            signUpConfirmationViewController.sentTo = self.sentTo
            signUpConfirmationViewController.user = self.pool?.getUser((self.txtEmail.text?.md5
                )!)
        }
    }
    
    @IBAction func onSignUp(sender: AnyObject) {

        guard let userNameValue = txtEmail.text?.md5 where !userNameValue.isEmpty,
            let passwordValue = self.txtPassword.text where !passwordValue.isEmpty else {
            UIAlertView(title: "Missing Required Fields",
                        message: "Username / Password are required for registration.",
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
            return
        }
        
        var attributes = [AWSCognitoIdentityUserAttributeType]()
        
        if let phoneValue = self.txtPhoneNumber.text where !phoneValue.isEmpty {
            let phone = AWSCognitoIdentityUserAttributeType()
            phone.name = "phone_number"
            phone.value = selectedContryCode! + phoneValue
            attributes.append(phone)
        }
        
        if let emailValue = self.txtEmail.text where !emailValue.isEmpty {
            let email = AWSCognitoIdentityUserAttributeType()
            email.name = "email"
            email.value = emailValue
            attributes.append(email)
        }
        
        //sign up the user
        self.pool?.signUp(userNameValue, password: passwordValue, userAttributes: attributes, validationData: nil).continueWithBlock {[weak self] (task: AWSTask) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            dispatch_async(dispatch_get_main_queue(), { 
                if let error = task.error {
                    UIAlertView(title: error.userInfo["__type"] as? String,
                        message: error.userInfo["message"] as? String,
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
                } else if let result = task.result as? AWSCognitoIdentityUserPoolSignUpResponse  {
                    // handle the case where user has to confirm his identity via email / SMS
                    if (result.user.confirmedStatus != AWSCognitoIdentityUserStatus.Confirmed) {
                        strongSelf.sentTo = result.codeDeliveryDetails?.destination
                        strongSelf.performSegueWithIdentifier("SignUpConfirmSegue", sender:sender)
                    } else {
                    UIAlertView(title: "Registration Complete",
                        message: "Registration was successful.",
                        delegate: nil,
                        cancelButtonTitle: "Ok").show()
                    strongSelf.presentingViewController?.dismissViewControllerAnimated(true, completion: nil)
                }
                }
                
            })
            return nil
        }
    }

    @IBAction func onCancel(sender: AnyObject) {
        self.presentingViewController?.dismissViewControllerAnimated(true, completion: nil)
    }
}

//MARK: - PICKER
extension UserPoolSignUpViewController: UIPickerViewDelegate, UIPickerViewDataSource, UITextFieldDelegate {
    
    func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int {
        return 1
    }
    func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int
    {
        return arrCountry.count
    }
    func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        selectedContryCode = arrCountry[row]["country_code"]
        txtCountry.text = arrCountry[row]["country_name"]
    }
    
    func pickerView(pickerView: UIPickerView, viewForRow row: Int, forComponent component: Int, reusingView view: UIView?) -> UIView {
        let label = UILabel()
        label.textColor = UIColor.blackColor()
        label.font = UIFont(name: "Helvetica", size: 18)
        label.textAlignment = NSTextAlignment.Center
        label.text = arrCountry[row]["country_name"]
        
        return label
    }
        
    func textFieldDidBeginEditing(textField: UITextField)
    {
        picker.selectRow(0, inComponent: 0, animated: true)
        
        picker.reloadAllComponents()
    }
}
